/**
 * SnapKit Bot - –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
 *
 * –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * –°–æ–∑–¥–∞–≤–∞–π—Ç–µ share-—Å—Å—ã–ª–∫–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤–∏–¥–µ–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–ª–∞—à–∫–∏
 */

const { bot, initBot } = require('./bot/bot');
const {
  handleStart,
  handleHelp,
  handleLink,
  handleCancel
} = require('./handlers/commands');
const { handleMessage } = require('./handlers/messages');
const { handleInlineQuery } = require('./handlers/inline');
const {
  handleScreenshotCommand,
  handlePhoto,
  handleTemplateSelection,
  handleGradientSelection,
  handleBackToTemplates,
  handleCancel: handleScreenshotCancel
} = require('./handlers/screenshot');
const db = require('./database/db');

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
 */
function registerCommandHandlers() {
  bot.onText(/\/start/, (msg) => handleStart(bot, msg));
  bot.onText(/\/help/, (msg) => handleHelp(bot, msg));
  bot.onText(/\/link/, (msg) => handleLink(bot, msg));
  bot.onText(/\/screenshot/, (msg) => handleScreenshotCommand(bot, msg));
  bot.onText(/\/cancel/, (msg) => handleCancel(bot, msg));
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
 */
function registerMessageHandlers() {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è screenshot feature
  bot.on('photo', (msg) => handlePhoto(bot, msg));

  // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message', (msg) => handleMessage(bot, msg));
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
 */
function registerInlineHandlers() {
  bot.on('inline_query', (query) => handleInlineQuery(bot, query));
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback queries
 */
function registerCallbackHandlers() {
  bot.on('callback_query', async (query) => {
    const data = query.data;

    if (data.startsWith('template:')) {
      const templateSlug = data.replace('template:', '');
      await handleTemplateSelection(bot, query, templateSlug);
    } else if (data.startsWith('gradient:')) {
      const gradientSlug = data.replace('gradient:', '');
      await handleGradientSelection(bot, query, gradientSlug);
    } else if (data === 'back_to_templates') {
      await handleBackToTemplates(bot, query);
    } else if (data === 'cancel') {
      await handleScreenshotCancel(bot, query);
    }
  });
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
 */
async function main() {
  console.log('‚ö° –ó–∞–ø—É—Å–∫ SnapKit Bot...\n');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  console.log('üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
  await db.initialize();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
  await initBot();

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  registerCommandHandlers();
  registerMessageHandlers();
  registerInlineHandlers();
  registerCallbackHandlers();

  console.log('\n‚ú® –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. SnapKit —Ä–∞–±–æ—Ç–∞–µ—Ç!\n');
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
main().catch((error) => {
  console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:', error);
  process.exit(1);
});
