/**
 * –°–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ n8n —á–µ—Ä–µ–∑ webhook
 */

const axios = require('axios');

const WEBHOOK_URL = process.env.N8N_WEBHOOK_URL;
const WEBHOOK_ENABLED = process.env.N8N_ENABLED === 'true';

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ n8n webhook
 */
async function logEvent(eventType, data) {
  // –ï—Å–ª–∏ webhook –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
  if (!WEBHOOK_ENABLED || !WEBHOOK_URL) {
    return;
  }

  try {
    const payload = {
      timestamp: new Date().toISOString(),
      event: eventType,
      data: data,
      source: 'snapkit-bot'
    };

    await axios.post(WEBHOOK_URL, payload, {
      timeout: 5000, // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log(`üì§ Webhook –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${eventType}`);
  } catch (error) {
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ webhook
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook:', error.message);
  }
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
 */
async function logScreenshotProcessed(userId, username, template, gradient, processingTime) {
  await logEvent('screenshot_processed', {
    user_id: userId,
    username: username,
    template: {
      id: template.id,
      slug: template.slug,
      name: template.name,
      type: template.type
    },
    gradient: {
      id: gradient.id,
      slug: gradient.slug,
      name: gradient.name
    },
    processing_time_ms: processingTime
  });
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function logError(userId, errorType, errorMessage, context = {}) {
  await logEvent('error', {
    user_id: userId,
    error_type: errorType,
    error_message: errorMessage,
    context: context
  });
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
 */
async function logCommand(userId, username, command) {
  await logEvent('command_used', {
    user_id: userId,
    username: username,
    command: command
  });
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ share-—Å—Å—ã–ª–∫–∏
 */
async function logLinkCreated(userId, username, linkType) {
  await logEvent('link_created', {
    user_id: userId,
    username: username,
    link_type: linkType
  });
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ inline-—Ä–µ–∂–∏–º–∞
 */
async function logInlineQuery(userId, username, queryType) {
  await logEvent('inline_query', {
    user_id: userId,
    username: username,
    query_type: queryType
  });
}

module.exports = {
  logEvent,
  logScreenshotProcessed,
  logError,
  logCommand,
  logLinkCreated,
  logInlineQuery
};
