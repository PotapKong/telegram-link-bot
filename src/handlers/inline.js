/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤
 */

const {
  extractTelegramLink,
  makeShareLink,
  isValidTelegramLink
} = require('../utils/linkUtils');

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∑–∞–ø—Ä–æ—Å–æ–≤
 */
async function handleInlineQuery(bot, query) {
  try {
    const queryText = query.query.trim();

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    if (!queryText) {
      const results = [
        {
          type: 'article',
          id: '0',
          title: 'üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å inline-—Ä–µ–∂–∏–º',
          description: '–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–ø–æ—Å—Ç –ø–æ—Å–ª–µ @bot_username',
          input_message_content: {
            message_text: 'üí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è inline-—Ä–µ–∂–∏–º–∞:\n\n1. –ù–∞–ø–∏—à–∏—Ç–µ @bot_username\n2. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–ø–æ—Å—Ç\n3. –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n\n–ü—Ä–∏–º–µ—Ä: @bot_username https://t.me/channel/123 –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ—Å—Ç'
          }
        }
      ];

      await bot.answerInlineQuery(query.id, results, {
        cache_time: 300,
        is_personal: true
      });
      return;
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    const parts = queryText.split(' ');
    let link = null;
    let description = '';

    // –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç–µ
    for (let i = 0; i < parts.length; i++) {
      if (parts[i].includes('t.me/')) {
        link = extractTelegramLink(parts[i]);
        // –í—Å—ë –ø–æ—Å–ª–µ —Å—Å—ã–ª–∫–∏ - –æ–ø–∏—Å–∞–Ω–∏–µ
        description = parts.slice(i + 1).join(' ');
        break;
      }
    }

    if (!link) {
      const results = [
        {
          type: 'article',
          id: '1',
          title: '‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
          description: '–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–ø–æ—Å—Ç (t.me/channel/123)',
          input_message_content: {
            message_text: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–ø–æ—Å—Ç.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: https://t.me/channel/123'
          }
        }
      ];

      await bot.answerInlineQuery(query.id, results, {
        cache_time: 30,
        is_personal: true
      });
      return;
    }

    // –°–æ–∑–¥–∞–µ–º share-—Å—Å—ã–ª–∫—É
    const shareLink = makeShareLink(link, description);

    const results = [
      {
        type: 'article',
        id: '2',
        title: '‚ú® Share-—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞',
        description: description || '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏',
        input_message_content: {
          message_text: shareLink
        }
      },
      {
        type: 'article',
        id: '3',
        title: 'üìã –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞',
        description: link,
        input_message_content: {
          message_text: link
        }
      }
    ];

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    if (description) {
      results.push({
        type: 'article',
        id: '4',
        title: 'üìù –° –æ–ø–∏—Å–∞–Ω–∏–µ–º',
        description: `${description}\n${link}`,
        input_message_content: {
          message_text: `${description}\n\n${shareLink}`
        }
      });
    }

    await bot.answerInlineQuery(query.id, results, {
      cache_time: 60,
      is_personal: true
    });
  } catch (error) {
    console.error('Error handling inline query:', error);
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      await bot.answerInlineQuery(query.id, [], {
        cache_time: 0,
        is_personal: true
      });
    } catch (err) {
      console.error('Failed to answer inline query:', err);
    }
  }
}

module.exports = {
  handleInlineQuery
};
