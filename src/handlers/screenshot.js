/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /screenshot
 */

const templateRepository = require('../database/repositories/templateRepository');
const gradientRepository = require('../database/repositories/gradientRepository');
const screenshotRepository = require('../database/repositories/screenshotRepository');
const imageProcessor = require('../services/imageProcessor');
const stateManager = require('../utils/stateManager');
const keyboards = require('../utils/keyboards');
const webhookLogger = require('../services/webhookLogger');
const axios = require('axios');

/**
 * –ö–æ–º–∞–Ω–¥–∞ /screenshot - –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
 */
async function handleScreenshotCommand(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    // –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    await webhookLogger.logCommand(userId, msg.from.username || null, '/screenshot');

    // –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    stateManager.clearState(userId);

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
    stateManager.setState(userId, {
      step: 'waiting_photo',
      chatId: chatId
    });

    await bot.sendMessage(
      chatId,
      'üì∏ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å.\n\n' +
      '–Ø –º–æ–≥—É —É–∫—Ä–∞—Å–∏—Ç—å –µ–≥–æ –æ–¥–Ω–∏–º –∏–∑ —Å—Ç–∏–ª–µ–π:\n' +
      'üñ•Ô∏è Mac Window ‚Äî —Å—Ç–∏–ª—å –æ–∫–Ω–∞ macOS\n' +
      'üì± iPhone ‚Äî –º–æ–∫–∞–ø iPhone\n' +
      'üìö Layered ‚Äî –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç\n\n' +
      '–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.'
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /screenshot:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handlePhoto(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  const state = stateManager.getState(userId);

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∂–¥—ë–º –ª–∏ –º—ã —Ñ–æ—Ç–æ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!state || state.step !== 'waiting_photo') {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
  }

  try {
    // –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    const photo = msg.photo[msg.photo.length - 1];
    const fileId = photo.file_id;

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const statusMsg = await bot.sendMessage(chatId, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ...');

    // –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
    const file = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${bot.token}/${file.file_path}`;

    const response = await axios.get(fileUrl, { responseType: 'arraybuffer' });
    const imageBuffer = Buffer.from(response.data);

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—É—Ñ–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    stateManager.updateState(userId, {
      step: 'selecting_template',
      originalFileId: fileId,
      imageBuffer: imageBuffer
    });

    // –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.deleteMessage(chatId, statusMsg.message_id);

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    const templates = await templateRepository.getAllActive();

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
    await bot.sendMessage(
      chatId,
      '‚ú® –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:',
      {
        reply_markup: keyboards.createTemplateKeyboard(templates)
      }
    );

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ:', error);
    await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
 */
async function handleTemplateSelection(bot, query, templateSlug) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const messageId = query.message.message_id;

  try {
    const state = stateManager.getState(userId);

    if (!state || state.step !== 'selecting_template') {
      await bot.answerCallbackQuery(query.id, { text: '‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /screenshot' });
      return;
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω
    const template = await templateRepository.getBySlug(templateSlug);

    if (!template) {
      await bot.answerCallbackQuery(query.id, { text: '‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä
    stateManager.updateState(userId, {
      step: 'selecting_gradient',
      template: template
    });

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
    const gradients = await gradientRepository.getAllActive();

    // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.editMessageText(
      `‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: ${template.name}\n\nüé® –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç —Ñ–æ–Ω–∞:`,
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboards.createGradientKeyboard(gradients)
      }
    );

    await bot.answerCallbackQuery(query.id);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞:', error);
    await bot.answerCallbackQuery(query.id, { text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
 */
async function handleGradientSelection(bot, query, gradientSlug) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const messageId = query.message.message_id;

  try {
    const state = stateManager.getState(userId);

    if (!state || state.step !== 'selecting_gradient') {
      await bot.answerCallbackQuery(query.id, { text: '‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /screenshot' });
      return;
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç
    const gradient = await gradientRepository.getBySlug(gradientSlug);

    if (!gradient) {
      await bot.answerCallbackQuery(query.id, { text: '‚ùå –ì—Ä–∞–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.editMessageText(
      `‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: ${state.template.name}\n` +
      `‚úÖ –í—ã–±—Ä–∞–Ω –≥—Ä–∞–¥–∏–µ–Ω—Ç: ${gradient.name}\n\n` +
      `‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...`,
      {
        chat_id: chatId,
        message_id: messageId
      }
    );

    await bot.answerCallbackQuery(query.id);

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
    const result = await imageProcessor.processScreenshot(
      state.imageBuffer,
      state.template,
      gradient,
      {
        radius: 12,
        shadow: {
          blur: 30,
          offsetX: 0,
          offsetY: 10,
          color: 'rgba(0, 0, 0, 0.3)'
        }
      }
    );

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const sentMessage = await bot.sendPhoto(chatId, result.buffer, {
      caption: `‚ú® –ì–æ—Ç–æ–≤–æ!\n\n` +
               `üìê –°—Ç–∏–ª—å: ${state.template.name}\n` +
               `üé® –ì—Ä–∞–¥–∏–µ–Ω—Ç: ${gradient.name}\n` +
               `‚ö° –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ ${result.processingTime}ms`
    });

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    await screenshotRepository.create({
      user_id: userId,
      username: query.from.username || null,
      template_id: state.template.id,
      gradient_id: gradient.id,
      settings: {
        radius: 12,
        shadow: { blur: 30, offsetX: 0, offsetY: 10 }
      },
      original_file_id: state.originalFileId,
      processed_file_id: sentMessage.photo[sentMessage.photo.length - 1].file_id,
      processing_time_ms: result.processingTime
    });

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å webhook –≤ n8n
    await webhookLogger.logScreenshotProcessed(
      userId,
      query.from.username || null,
      state.template,
      gradient,
      result.processingTime
    );

    // –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    stateManager.clearState(userId);

    // –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
    await bot.deleteMessage(chatId, messageId);

    console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞:', error);

    // –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
    await webhookLogger.logError(userId, 'screenshot_processing_error', error.message, {
      template: state?.template?.slug,
      gradient: gradientSlug
    });

    await bot.answerCallbackQuery(query.id, { text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ' });
    await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —Å /screenshot');
    stateManager.clearState(userId);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —à–∞–±–ª–æ–Ω–∞–º"
 */
async function handleBackToTemplates(bot, query) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const messageId = query.message.message_id;

  try {
    const state = stateManager.getState(userId);

    if (!state) {
      await bot.answerCallbackQuery(query.id, { text: '‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞' });
      return;
    }

    // –í–µ—Ä–Ω—É—Ç—å –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
    stateManager.updateState(userId, { step: 'selecting_template' });

    const templates = await templateRepository.getAllActive();

    await bot.editMessageText(
      '‚ú® –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:',
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboards.createTemplateKeyboard(templates)
      }
    );

    await bot.answerCallbackQuery(query.id);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —à–∞–±–ª–æ–Ω–∞–º:', error);
    await bot.answerCallbackQuery(query.id, { text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
}

/**
 * –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function handleCancel(bot, query) {
  const userId = query.from.id;
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;

  stateManager.clearState(userId);

  await bot.editMessageText(
    '‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /screenshot —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.',
    {
      chat_id: chatId,
      message_id: messageId
    }
  );

  await bot.answerCallbackQuery(query.id);
}

module.exports = {
  handleScreenshotCommand,
  handlePhoto,
  handleTemplateSelection,
  handleGradientSelection,
  handleBackToTemplates,
  handleCancel
};
